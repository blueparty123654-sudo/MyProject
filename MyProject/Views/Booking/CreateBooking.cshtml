@model MyProject.ViewModels.ProductDetailsViewModel
@using System.Globalization @{
    ViewData["Title"] = Model.Name;
}

<div class="container mt-5 product-details-page">

    @* --- แสดง TempData Messages (ไม่ต้องแปล) --- *@
    @if (TempData["BookingError"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">@TempData["BookingError"]<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button></div>
    }
    @if (TempData["BookingWarning"] != null)
    {
        <div class="alert alert-warning alert-dismissible fade show" role="alert">@TempData["BookingWarning"]<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button></div>
    }
    @if (TempData["BookingSuccess"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">@TempData["BookingSuccess"]<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button></div>
    }

    @* ----- Section 1: ชื่อ, ราคา, และฟอร์มจอง ----- *@
    <div class="row justify-content-center">
        <div class="col-lg-8 col-md-10">
            <div class="booking-form-container p-4 rounded shadow-sm mb-4">

                <h2 class="product-title text-center mb-3">@Model.Name</h2>
                <p class="text-center text-muted mb-3">(@Localizer["Branch"] @Localizer[Model.BranchName])</p>
                <hr />

                @* --- ส่วนแสดงรูปภาพ --- *@
                <div class="product-images-block mb-4">
                    <div class="row gx-2">
                        <div class="col-6 text-center">
                            @if (!string.IsNullOrEmpty(Model.ImageUrl))
                            {
                                <img src="@Model.ImageUrl" alt="@Model.Name - @Localizer["Image"] 1" class="img-fluid rounded product-block-img">
                            }
                        </div>
                        <div class="col-6 text-center">
                            @if (!string.IsNullOrEmpty(Model.ImageUrl2))
                            {
                                <img src="@Model.ImageUrl2" alt="@Model.Name - @Localizer["Image"] 2" class="img-fluid rounded product-block-img">
                            }
                        </div>
                    </div>
                </div>
                <hr />

                @* --- ราคา --- *@
                <div class="pricing-info text-center my-4">
                    <span class="price-tag"><strong>@Model.PricePerDay.ToString("N0")</strong> @Localizer["Baht/Day"]</span>
                    <span class="price-tag"><strong>@Model.PricePerWeek.ToString("N0")</strong> @Localizer["Baht/Week"]</span>
                    <span class="price-tag"><strong>@Model.PricePerMonth.ToString("N0")</strong> @Localizer["Baht/Month"]</span>
                </div>
                <hr />

                @* --- ฟอร์มจอง --- *@
                <form asp-action="Create" asp-controller="Booking" method="post" id="bookingForm" class="mt-4">
                    @Html.AntiForgeryToken()
                    <input type="hidden" asp-for="ProductId" />
                    <input type="hidden" asp-for="BranchId" />

                    <p class="text-center mb-3 fw-bold">@Localizer["Select your rental period:"]</p>

                    <div class="row mb-3">
                        <div class="col-sm-6 mb-2 mb-sm-0">
                            <label asp-for="PickupDate" class="form-label">@Localizer["Pickup Date"]</label>
                            <input asp-for="PickupDate" type="date" class="form-control" required>
                            <span asp-validation-for="PickupDate" class="text-danger"></span>
                        </div>
                        <div class="col-sm-6">
                            <label asp-for="ReturnDate" class="form-label">@Localizer["Return Date"]</label>
                            <input asp-for="ReturnDate" type="date" class="form-control" required>
                            <span asp-validation-for="ReturnDate" class="text-danger"></span>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label asp-for="DiscountCode" class="form-label">@Localizer["Discount Code"]</label>
                        <div class="input-group">
                            <input asp-for="DiscountCode" type="text" class="form-control" placeholder="@Localizer["Enter discount code (if any)"]">
                            <button class="btn btn-outline-primary" type="button" id="applyDiscountBtn">
                                <i class="fas fa-check"></i> @Localizer["Check"]
                            </button>
                        </div>
                        <span id="discountMessage" class="d-block mt-1 small"></span>
                    </div>

                    <div id="estimatedPrice" class="mb-3 fw-bold text-end">---</div>
                    <div id="estimatedPoints" class="mb-3 small text-muted text-end" style="margin-top: -0.5rem;"></div>

                    <button type="submit" class="btn btn-confirm-booking w-100 mt-3" disabled>
                        @(User.Identity.IsAuthenticated? @Localizer["Please select dates"] : @Localizer["Please login to book"])
                    </button>
                </form>
            </div>
        </div>
    </div>

    @* ----- Section 2: รายละเอียด Spec ----- *@
    <div class="row justify-content-center mt-2">
        <div class="col-lg-8 col-md-10">
            <div class="specifications-container p-4 rounded shadow-sm">
                <h3 class="spec-title mb-4"><i class="fas fa-clipboard-list"></i> @Localizer["Vehicle Specs"] @Model.Name</h3>
                <table class="table table-striped table-hover spec-table">
                    <tbody>
                        @if (!string.IsNullOrEmpty(Model.GearType))
                        {
                            <tr><th scope="row"><i class="fas fa-cogs spec-icon"></i> @Localizer["Gear System"]</th><td>@Model.GearType</td></tr>
                        }
                        @if (!string.IsNullOrEmpty(Model.Engine))
                        {
                            <tr><th scope="row"><i class="fas fa-gas-pump spec-icon"></i> @Localizer["Engine"]</th><td>@Model.Engine</td></tr>
                        }
                        @if (!string.IsNullOrEmpty(Model.CoolingSystem))
                        {
                            <tr><th scope="row"><i class="fas fa-wind spec-icon"></i> @Localizer["Cooling System"]</th><td>@Model.CoolingSystem</td></tr>
                        }
                        @if (!string.IsNullOrEmpty(Model.StartingSystem))
                        {
                            <tr><th scope="row"><i class="fas fa-bolt spec-icon"></i> @Localizer["Starting System"]</th><td>@Model.StartingSystem</td></tr>
                        }
                        @if (!string.IsNullOrEmpty(Model.FuelType))
                        {
                            <tr><th scope="row"><i class="fas fa-tint spec-icon"></i> @Localizer["Fuel Type"]</th><td>@Model.FuelType</td></tr>
                        }
                        @if (!string.IsNullOrEmpty(Model.FuelDispensing))
                        {
                            <tr><th scope="row"><i class="fas fa-atom spec-icon"></i> @Localizer["Fuel Dispensing"]</th><td>@Model.FuelDispensing</td></tr>
                        }
                        @if (!string.IsNullOrEmpty(Model.FuelTankCapacity))
                        {
                            <tr><th scope="row"><i class="fas fa-fill-drip spec-icon"></i> @Localizer["Fuel Tank Capacity"]</th><td>@Model.FuelTankCapacity @Localizer["Liters"]</td></tr>
                        }
                        @if (!string.IsNullOrEmpty(Model.BrakeSystem))
                        {
                            <tr><th scope="row"><i class="fas fa-compact-disc spec-icon"></i> @Localizer["Brake System"]</th><td>@Model.BrakeSystem</td></tr>
                        }
                        @if (!string.IsNullOrEmpty(Model.Suspension))
                        {
                            <tr><th scope="row"><i class="fas fa-road spec-icon"></i> @Localizer["Suspension"]</th><td>@Model.Suspension</td></tr>
                        }
                        @if (!string.IsNullOrEmpty(Model.TireSize))
                        {
                            <tr><th scope="row"><i class="fas fa-ring spec-icon"></i> @Localizer["Tire Size"]</th><td>@Model.TireSize</td></tr>
                        }
                        @if (!string.IsNullOrEmpty(Model.Dimensions))
                        {
                            <tr><th scope="row"><i class="fas fa-ruler-combined spec-icon"></i> @Localizer["Dimensions (LxWxH)"]</th><td>@Model.Dimensions @Localizer["mm."]</td></tr>
                        }
                        @if (!string.IsNullOrEmpty(Model.VehicleWeight))
                        {
                            <tr><th scope="row"><i class="fas fa-weight-hanging spec-icon"></i> @Localizer["Vehicle Weight"]</th><td>@Model.VehicleWeight @Localizer["kg."]</td></tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    @* ----- ปุ่มกลับหน้าหลัก ----- *@
    <div class="row mt-4 mb-5">
        <div class="col-12 text-center">
            <a asp-action="Index" asp-controller="Home" class="btn btn-back-to-list">
                <i class="fas fa-arrow-left"></i> @Localizer["Back to List"]
            </a>
        </div>
    </div>

</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        $(document).ready(function () {
            // --- Cache Elements (เหมือนเดิม) ---
            const pickupDateInput = $('#PickupDate');
            const returnDateInput = $('#ReturnDate');
            const priceDisplay = $('#estimatedPrice');
            const pointsDisplay = $('#estimatedPoints');
            const confirmButton = $('.btn-confirm-booking');
            const bookingForm = $('#bookingForm');
            const discountCodeInput = $('#DiscountCode');
            const applyDiscountBtn = $('#applyDiscountBtn');
            const discountMessage = $('#discountMessage');
            let appliedDiscountRate = 0;
            let appliedDiscountCode = '';
            let isDiscountValidOrNotApplicable = true;

            // --- (แก้ไข) Prices from Model (ใช้ InvariantCulture เพื่อความปลอดภัย) ---
            const pricePerDay = parseFloat('@Model.PricePerDay.ToString("0.00", CultureInfo.InvariantCulture)');
            const pricePerWeek = parseFloat('@Model.PricePerWeek.ToString("0.00", CultureInfo.InvariantCulture)');
            const pricePerMonth = parseFloat('@Model.PricePerMonth.ToString("0.00", CultureInfo.InvariantCulture)');

            // --- Check Login Status ---
            const isLoggedIn = @(User.Identity?.IsAuthenticated ?? false ? "true" : "false");

            // --- Function to Calculate Optimized Price (เพิ่ม Localizer) ---
            function calculateOptimizedPrice(totalDays) {
                if (totalDays <= 0) return { price: 0, breakdown: `0 @Localizer["days"]` };

                let remainingDays = totalDays;
                let months = 0, weeks = 0, days = 0;
                let totalPrice = 0;
                const daysInMonth = 30;
                const daysInWeek = 7;

                if (pricePerMonth > 0 && remainingDays >= daysInMonth) {
                    months = Math.floor(remainingDays / daysInMonth);
                    totalPrice += months * pricePerMonth;
                    remainingDays %= daysInMonth;
                }
                if (pricePerWeek > 0 && remainingDays >= daysInWeek) {
                    if (pricePerWeek < pricePerDay * daysInWeek) {
                        weeks = Math.floor(remainingDays / daysInWeek);
                        totalPrice += weeks * pricePerWeek;
                        remainingDays %= daysInWeek;
                    }
                }
                if (remainingDays > 0) {
                    days = remainingDays;
                    totalPrice += days * pricePerDay;
                }

                let breakdownParts = [];
                if (months > 0) breakdownParts.push(`${months} @Localizer["months"]`);
                if (weeks > 0) breakdownParts.push(`${weeks} @Localizer["weeks"]`);
                if (days > 0) breakdownParts.push(`${days} @Localizer["days"]`);
                let breakdown = breakdownParts.join(', ');
                if (!breakdown) breakdown = `${totalDays} @Localizer["days"]`;

                const points = Math.ceil(totalPrice / 10);

                return {
                    originalPrice: totalPrice,
                    breakdown: breakdown,
                    points: points
                };
            }

            // --- Function to Validate Dates and Display Info (เพิ่ม Localizer) ---
            function validateAndDisplay() {
                priceDisplay.text('---').removeClass('text-success text-danger');
                pointsDisplay.text('');
                confirmButton.prop('disabled', true)
                             .text(isLoggedIn ? '@Localizer["Please select dates"]' : '@Localizer["Please login to book"]');
                pickupDateInput.removeClass('is-invalid');
                returnDateInput.removeClass('is-invalid');
                let isDateValid = true;

                const today = new Date();
                today.setHours(0, 0, 0, 0);
                const pickupDateStr = pickupDateInput.val();
                const returnDateStr = returnDateInput.val();

                let calculatedPriceInfo = null;
                let daysDiff = 0;
                if (pickupDateStr && returnDateStr) {
                    const pickupDate = new Date(pickupDateStr);
                    const returnDate = new Date(returnDateStr);

                    if (pickupDate < today) {
                        priceDisplay.html(`<span class="text-danger">@Localizer["Pickup date cannot be in the past"]</span>`);
                        confirmButton.text('@Localizer["Invalid Dates"]');
                        pickupDateInput.addClass('is-invalid');
                        isDateValid = false;
                    }
                    else if (returnDate <= pickupDate) {
                        priceDisplay.html(`<span class="text-danger">@Localizer["Return date must be after pickup date"]</span>`);
                        confirmButton.text('@Localizer["Invalid Dates"]');
                        returnDateInput.addClass('is-invalid');
                        isDateValid = false;
                    } else {
                        const timeDiff = returnDate.getTime() - pickupDate.getTime();
                        daysDiff = Math.ceil(timeDiff / (1000 * 3600 * 24)) + 1;

                        if (daysDiff <= 0) {
                            priceDisplay.html(`<span class="text-danger">@Localizer["Calculation error"]</span>`);
                            confirmButton.text('Error');
                            isDateValid = false;
                        } else {
                            calculatedPriceInfo = calculateOptimizedPrice(daysDiff);
                            priceDisplay.html(`@Localizer["Estimated Price:"] <strong>${calculatedPriceInfo.originalPrice.toLocaleString('th-TH')}</strong> @Localizer["Baht"] (${calculatedPriceInfo.breakdown})`)
                                        .addClass('text-success');
                            pointsDisplay.text(`(@Localizer["Earn"] ${calculatedPriceInfo.points.toLocaleString('th-TH')} @Localizer["Points"])`);
                        }
                    }
                } else {
                    isDateValid = false;
                }

                // --- Enable/Disable Button (เพิ่ม Localizer) ---
                if (isDateValid && isDiscountValidOrNotApplicable && isLoggedIn) {
                    confirmButton.prop('disabled', false).text('@Localizer["Confirm Booking"]');
                } else if (isDateValid && isDiscountValidOrNotApplicable && !isLoggedIn) {
                    confirmButton.prop('disabled', true).text('@Localizer["Please login to book"]');
                } else if (isDateValid && !isDiscountValidOrNotApplicable) {
                    confirmButton.prop('disabled', true).text('@Localizer["Invalid Discount Code"]');
                }
            }

            // --- Apply Discount Button Click (เพิ่ม Localizer) ---
            applyDiscountBtn.on('click', function () {
                const code = discountCodeInput.val().trim();
                if (!code) {
                    discountMessage.text('@Localizer["Please enter code"]').removeClass('text-success').addClass('text-danger');
                    isDiscountValidOrNotApplicable = true;
                    validateAndDisplay();
                    return;
                }

                discountMessage.text('@Localizer["Checking..."]').removeClass('text-success text-danger');
                applyDiscountBtn.prop('disabled', true);
                isDiscountValidOrNotApplicable = false;
                validateAndDisplay();

                $.ajax({
                    url: '@Url.Action("ValidateDiscount", "Booking")',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({ code: code }),
                    headers: { RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val() },
                    success: function (response) {
                        if (response.isValid) {
                            appliedDiscountCode = code;
                            discountMessage.text(`✓ ${response.message}`).removeClass('text-danger').addClass('text-success'); // (Msg from Server)
                            isDiscountValidOrNotApplicable = true;
                        } else {
                            appliedDiscountCode = '';
                            discountMessage.text(`✗ ${response.message}`).removeClass('text-success').addClass('text-danger'); // (Msg from Server)
                            isDiscountValidOrNotApplicable = false;
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        console.error("AJAX Error:", textStatus, errorThrown);
                        discountMessage.text('✗ @Localizer["Error checking code"]').removeClass('text-success').addClass('text-danger');
                        appliedDiscountCode = '';
                        isDiscountValidOrNotApplicable = false;
                    },
                    complete: function () {
                        applyDiscountBtn.prop('disabled', false);
                        validateAndDisplay();
                    }
                });
            });

            // --- Clear discount status (เหมือนเดิม) ---
            discountCodeInput.on('input', function () {
                appliedDiscountCode = '';
                discountMessage.text('');
                isDiscountValidOrNotApplicable = true;
                validateAndDisplay();
            });

            // --- Event Listeners & Initial State (เหมือนเดิม) ---
            pickupDateInput.on('change', validateAndDisplay);
            returnDateInput.on('change', validateAndDisplay);
            validateAndDisplay();
        }); // end document ready
    </script>
}